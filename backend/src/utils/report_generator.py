"""Report generation utilities"""

import docx
from docx import Document
from typing import Dict, Any, Optional
from pathlib import Path


class ReportGenerator:
    """Utility class for generating reports"""
    
    def __init__(self):
        self.doc = None
    
    def create_document(self) -> Document:
        """
        Create a new document
        
        Returns:
            Document object
        """
        self.doc = Document()
        return self.doc
    
    def add_heading(self, text: str, level: int = 1) -> None:
        """
        Add a heading to the document
        
        Args:
            text: Heading text
            level: Heading level (1-9)
        """
        if self.doc is None:
            self.create_document()
        
        self.doc.add_heading(text, level=level)
    
    def add_paragraph(self, text: str) -> None:
        """
        Add a paragraph to the document
        
        Args:
            text: Paragraph text
        """
        if self.doc is None:
            self.create_document()
        
        self.doc.add_paragraph(text)
    
    def add_data_summary(self, data_summary: Dict[str, Any]) -> None:
        """
        Add data summary to the document
        
        Args:
            data_summary: Dictionary containing data summary information
        """
        if self.doc is None:
            self.create_document()
        
        self.add_heading("Data Summary", level=2)
        
        for key, value in data_summary.items():
            self.add_paragraph(f"{key}: {value}")
    
    def save_document(self, file_path: str) -> None:
        """
        Save the document to a file
        
        Args:
            file_path: Path where to save the document
        """
        if self.doc is None:
            raise ValueError("No document created. Call create_document() first.")
        
        # Ensure directory exists
        Path(file_path).parent.mkdir(parents=True, exist_ok=True)
        
        self.doc.save(file_path)
    
    def generate_sample_report(self, output_path: str = "report.docx") -> None:
        """
        Generate a sample report
        
        Args:
            output_path: Path where to save the report
        """
        self.create_document()
        
        self.add_heading("Sample Report", level=1)
        self.add_paragraph("This is a sample report generated by the Choco Data Processing API.")
        
        self.add_heading("Introduction", level=2)
        self.add_paragraph("This report demonstrates the report generation capabilities.")
        
        self.save_document(output_path)


# Utility function for quick report generation
def generate_quick_report(title: str, content: Dict[str, Any], output_path: str) -> None:
    """
    Generate a quick report with title and content
    
    Args:
        title: Report title
        content: Dictionary with content to include
        output_path: Path where to save the report
    """
    generator = ReportGenerator()
    generator.create_document()
    generator.add_heading(title, level=1)
    
    for section, data in content.items():
        generator.add_heading(section, level=2)
        if isinstance(data, dict):
            for key, value in data.items():
                generator.add_paragraph(f"{key}: {value}")
        else:
            generator.add_paragraph(str(data))
    
    generator.save_document(output_path)