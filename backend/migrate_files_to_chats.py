#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫ —á–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ file_metadata,
—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è chat_id –¥–ª—è —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —á–∞—Ç—É.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
1. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –±–µ–∑ chat_id
2. –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π)
3. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∫ —ç—Ç–æ–º—É —á–∞—Ç—É
"""

import asyncio
import os
import sys
from datetime import datetime
from motor.motor_asyncio import AsyncIOMotorClient
from bson import ObjectId
import uuid

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from config import settings

class FileChatMigration:
    def __init__(self):
        self.client = None
        self.database = None
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        try:
            self.client = AsyncIOMotorClient(settings.MONGODB_URL)
            self.database = self.client[settings.DATABASE_NAME]
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await self.client.admin.command('ping')
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MongoDB")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            raise e
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB"""
        if self.client:
            self.client.close()
            print("‚úÖ –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç MongoDB")
    
    async def get_or_create_user_chat(self, user_id: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π"""
        chats_collection = self.database["chats"]
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_chat = await chats_collection.find_one({"user_id": user_id})
        
        if existing_chat:
            chat_id = str(existing_chat["_id"])
            print(f"  üìÅ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç: {chat_id}")
            return chat_id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        now = datetime.utcnow()
        session_id = str(uuid.uuid4())
        
        new_chat = {
            "user_id": user_id,
            "title": "–§–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "session_id": session_id,
            "last_message_preview": None,
            "message_count": 0,
            "created_at": now,
            "updated_at": now
        }
        
        result = await chats_collection.insert_one(new_chat)
        chat_id = str(result.inserted_id)
        print(f"  ‚ûï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: {chat_id}")
        return chat_id
    
    async def migrate_user_files(self, user_id: str) -> int:
        """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        files_collection = self.database["file_metadata"]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –±–µ–∑ chat_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        files_without_chat = await files_collection.find({
            "user_id": user_id,
            "$or": [
                {"chat_id": None},
                {"chat_id": {"$exists": False}}
            ]
        }).to_list(None)
        
        if not files_without_chat:
            return 0
        
        print(f"  üìÑ –ù–∞–π–¥–µ–Ω–æ {len(files_without_chat)} —Ñ–∞–π–ª–æ–≤ –±–µ–∑ chat_id")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id = await self.get_or_create_user_chat(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updated_count = 0
        for file_doc in files_without_chat:
            file_id = file_doc["_id"]
            filename = file_doc.get("filename", "unknown")
            
            result = await files_collection.update_one(
                {"_id": file_id},
                {
                    "$set": {
                        "chat_id": chat_id,
                        "updated_at": datetime.utcnow()
                    }
                }
            )
            
            if result.modified_count > 0:
                updated_count += 1
                print(f"    ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: {filename} -> chat_id: {chat_id}")
            else:
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª: {filename}")
        
        return updated_count
    
    async def run_migration(self):
        """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            await self.connect()
            
            files_collection = self.database["file_metadata"]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∞–π–ª–∞–º–∏ –±–µ–∑ chat_id
            pipeline = [
                {
                    "$match": {
                        "$or": [
                            {"chat_id": None},
                            {"chat_id": {"$exists": False}}
                        ]
                    }
                },
                {
                    "$group": {
                        "_id": "$user_id",
                        "file_count": {"$sum": 1}
                    }
                }
            ]
            
            users_with_files = await files_collection.aggregate(pipeline).to_list(None)
            
            if not users_with_files:
                print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —á–∞—Ç–∞–º. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return
            
            print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è {len(users_with_files)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            print()
            
            total_updated = 0
            
            for user_data in users_with_files:
                user_id = user_data["_id"]
                file_count = user_data["file_count"]
                
                print(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} ({file_count} —Ñ–∞–π–ª–æ–≤)")
                
                updated_count = await self.migrate_user_files(user_id)
                total_updated += updated_count
                
                print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {updated_count}/{file_count}")
                print()
            
            print(f"üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìä –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_updated}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            raise e
        finally:
            await self.disconnect()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –∫ —á–∞—Ç–∞–º...")
    print("=" * 50)
    
    migration = FileChatMigration()
    await migration.run_migration()
    
    print("=" * 50)
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())